<?php
/**
 * @file
 * Module file for the Taxonomy dupecheck module.
 */

/**
 * Implements hook_help().
 */
function taxonomy_field_dupecheck_help($path, $arg) {
  if ($path == 'admin/help#taxonomy_field_dupecheck') {
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t("The Taxonomy field dupecheck module prevents Drupal administrators from adding duplicate taxonomy field value. It's helpful when entering large amounts of term field value in situations where each value must be unique. This saves time by preventing administrators from enforcing a unique value policy through later cleanup.") . '</p>';
    $output .= '<p>' . t("The module provides a configuration screen allowing administrators to choose which should be unique: taxonomy terms field. It defaults to case-insensitive comparisons, with an option to change to case-sensitive. Based on the settings, the user will see an error message when adding a duplicate value.") . '</p>';
    return $output;
  }
}

/**
 * Implements hook_menu().
 */
function taxonomy_field_dupecheck_menu() {

  $items = array();

  $items['admin/config/content/taxonomy_field_dupecheck'] = array(
    'title'            => 'Taxonomy field dupecheck',
    'description'      => 'Configuration for the Taxonomy dupecheck module.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('taxonomy_dupecheck_field_form'),
    'access arguments' => array('administer taxonomy'),
  );

  return $items;
}

/**
 * Form builder; creates and displays the Taxonomy dupecheck
 * configuration settings form.
 */
function taxonomy_dupecheck_field_form($form, &$form_state) {

  // Checkboxes to choose what should be checked for dupes (vocab, terms, both)
  $form['taxonomy_field_dupecheck_types'] = array(
    '#type'          => 'checkboxes',
    '#title'         => 'Check for duplicate',
    '#default_value' => variable_get('taxonomy_field_dupecheck_types', array()),
    '#options'       => array(
      'term_field'  => t('Terms Field(within a term)'),
    ),
  );
  // Checkbox to indicate whether the check should be case-sensitive
  $form['taxonomy_field_dupecheck_case_sensitive'] = array(
    '#type'  => 'checkbox',
    '#title' => "Case-sensitive comparison (e.g. 'Foo' and 'foo' are not duplicates if checked).",
    '#default_value' => variable_get('taxonomy_field_dupecheck_case_sensitive'),
  );
  return system_settings_form($form);

}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term().
 */
function taxonomy_field_dupecheck_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {

  // Do not add the validator if Delete was hit.
  if (isset($form_state['triggering_element']['#value']) && $form_state['triggering_element']['#value'] == t('Delete')) {
    return;
  }

  // Get the types of taxonomy objects we will validate against
  $types = variable_get('taxonomy_field_dupecheck_types', array());
  // Add the validator if we're checking field related to terms for dupes.
  if ($types['term_field']) {
      $form['#validate'][] = 'taxonomy_dupecheck_term_field_validate';
  }

}

/**
 * Implements _form_validate() for taxonomy_form_term().
 */
function taxonomy_dupecheck_term_field_validate($form, &$form_state) {
	dpm($form_state);
	$vid = $form_state['values']['vid'];
	$tid = $form_state['values']['tid'];
	foreach($form_state['values']['field_keyword']['und'] as $key => $keyword) {
		if(isset($keyword['value'])) {
			$keywords[] = $keyword['value'];
		}
	}
	if(($key_val = array_search('A', $keywords)) !== false) {
		unset($keywords[$key_val]);
	}
	$last_keyword = end($keywords);
	$last_key = key($keywords);
	$counts = array_count_values($keywords);
	foreach($counts as $v => $count) {
		if($count > 1) {//Present multiple times
			$present_multiple[] = $v;
		}
	}
	if (taxonomy_dupecheck_is_dupe_term_field($last_keyword, $vid, $tid) || isset($present_multiple)) {
		form_set_error('field_keyword[und][$last_key][value]', t('The term field %keyword already exists in this vocabulary.', array('%keyword' => check_plain($last_keyword))));
	}
}

/**
 * Checks whether a term field is a duplicate, based on the module preferences.
 *
 * @param $last_keyword
 *   Name of the new term field to check
 *
 * @param int $vid
 *   ID of the vocabulary the new term belongs to
 *
 * @param int $tid
 *   Term ID of the new term (used when updating an existing term name)
 *
 * @return bool
 *   TRUE if the term is a duplicate, FALSE if not
 */
 
function taxonomy_dupecheck_is_dupe_term_field($last_keyword, $vid, $tid) {
	if($vid == 2 && isset($last_keyword)) {
		dpm($last_keyword);
		$term_id = db_query("SELECT entity_id FROM field_data_field_keyword WHERE field_keyword_value = :keyword AND deleted = 0", array('keyword' => $last_keyword))->fetchField();
	}
	dpm($term_id);
	// No results, term field is unique
	if(!$term_id) {
		return FALSE;
	}
	return TRUE;
}
